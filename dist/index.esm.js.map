{"version":3,"file":"index.esm.js","sources":["../src/validators/string.ts","../src/validators/number.ts","../src/validators/email.ts","../src/index.ts"],"sourcesContent":["import { ValidationRule, ValidatorConfig } from '../types';\n\nexport function createStringValidators(config: ValidatorConfig): ValidationRule[] {\n  const rules: ValidationRule[] = [];\n\n  // Required validation\n  if (config.required) {\n    rules.push({\n      validate: (value) => {\n        if (value === undefined || value === null) return false;\n        if (typeof value === 'string') return value.trim().length > 0;\n        return true;\n      },\n      message: 'This field is required'\n    });\n  }\n\n  // Minimum length validation\n  if (typeof config.minLength === 'number') {\n    rules.push({\n      validate: (value) => {\n        if (value === undefined || value === null) return true;\n        return typeof value === 'string' && value.length >= config.minLength!;\n      },\n      message: `Minimum length is ${config.minLength} characters`\n    });\n  }\n\n  // Maximum length validation\n  if (typeof config.maxLength === 'number') {\n    rules.push({\n      validate: (value) => {\n        if (value === undefined || value === null) return true;\n        return typeof value === 'string' && value.length <= config.maxLength!;\n      },\n      message: `Maximum length is ${config.maxLength} characters`\n    });\n  }\n\n  // Pattern validation\n  if (config.pattern instanceof RegExp) {\n    rules.push({\n      validate: (value) => {\n        if (value === undefined || value === null) return true;\n        return typeof value === 'string' && config.pattern!.test(value);\n      },\n      message: 'The format is invalid'\n    });\n  }\n\n  return rules;\n}","import { ValidationRule, ValidatorConfig } from '../types';\n\nexport function createNumberValidators(config: ValidatorConfig): ValidationRule[] {\n  const rules: ValidationRule[] = [];\n\n  // Type validation\n  rules.push({\n    validate: (value) => {\n      if (value === undefined || value === null) return true;\n      return !isNaN(Number(value));\n    },\n    message: 'Value must be a number'\n  });\n\n  // Minimum value validation\n  if (typeof config.min === 'number') {\n    rules.push({\n      validate: (value) => {\n        if (value === undefined || value === null) return true;\n        return Number(value) >= config.min!;\n      },\n      message: `Minimum value is ${config.min}`\n    });\n  }\n\n  // Maximum value validation\n  if (typeof config.max === 'number') {\n    rules.push({\n      validate: (value) => {\n        if (value === undefined || value === null) return true;\n        return Number(value) <= config.max!;\n      },\n      message: `Maximum value is ${config.max}`\n    });\n  }\n\n  return rules;\n}","import { ValidationRule } from '../types';\n\nexport function createEmailValidator(): ValidationRule {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  \n  return {\n    validate: (value) => {\n      if (value === undefined || value === null || value === '') return true;\n      return typeof value === 'string' && emailRegex.test(value);\n    },\n    message: 'Invalid email format'\n  };\n}","import { ValidationResult, ValidatorConfig, ValidationRule } from './types';\nimport { createStringValidators } from './validators/string';\nimport { createNumberValidators } from './validators/number';\nimport { createEmailValidator } from './validators/email';\n\nexport class SimpleValidator {\n  private rules: ValidationRule[] = [];\n\n  constructor(config: ValidatorConfig = {\n    pattern: undefined\n  }) {\n    this.buildRules(config);\n  }\n\n  private buildRules(config: ValidatorConfig): void {\n    // String validations\n    if (typeof config.minLength === 'number' || \n        typeof config.maxLength === 'number' || \n        config.pattern || \n        config.required) {\n      this.rules.push(...createStringValidators(config));\n    }\n\n    // Number validations\n    if (typeof config.min === 'number' || typeof config.max === 'number') {\n      this.rules.push(...createNumberValidators(config));\n    }\n\n    // Email validation\n    if (config.email) {\n      this.rules.push(createEmailValidator());\n    }\n\n    // Custom validations\n    if (config.custom && Array.isArray(config.custom)) {\n      this.rules.push(...config.custom);\n    }\n  }\n\n  validate(value: any): ValidationResult {\n    const errors: string[] = [];\n\n    for (const rule of this.rules) {\n      if (!rule.validate(value)) {\n        errors.push(rule.message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  static email(): SimpleValidator {\n    return new SimpleValidator({ email: true, required: true });\n  }\n\n  static required(): SimpleValidator {\n    return new SimpleValidator({ required: true });\n  }\n\n  static string(minLength?: number, maxLength?: number): SimpleValidator {\n    return new SimpleValidator({ required: true, minLength, maxLength });\n  }\n\n  static number(min?: number, max?: number): SimpleValidator {\n    return new SimpleValidator({\n      min,\n      max\n    });\n  }\n}\n\n// Export types directly instead of using export *\nexport { ValidationResult, ValidatorConfig, ValidationRule } from './types';\n// Export types and utility functions\nexport * from './types';\n"],"names":[],"mappings":"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"}